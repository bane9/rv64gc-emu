name: Build and Test

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y cmake libsdl2-dev libsdl2-ttf-dev libicu-dev libvterm-dev

      - name: Install RISC-V GNU toolchain (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y gcc-riscv64-unknown-elf

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake sdl2 sdl2_ttf icu4c libvterm

      - name: Set environment variables for ICU (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "ICU_ROOT=$(brew --prefix icu4c)" >> $GITHUB_ENV
          echo "LDFLAGS=-L$(brew --prefix icu4c)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix icu4c)/include" >> $GITHUB_ENV

      - name: Install RISC-V GNU toolchain (macOS)
        if: runner.os == 'macOS'
        run: |
          brew tap riscv-software-src/riscv
          brew install riscv-tools

      - name: Add RISC-V GNU toolchain to PATH (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          echo "/usr/bin" >> $GITHUB_PATH

      - name: Configure
        run: |
          cmake . -Bbuild/ -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          cmake --build build/

      # - name: Run Tests
      #   run: |
      #     cmake -P MakeTests.cmake
      #     cd build/
      #     ctest --output-on-failure 

      - name: Upload build artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: release-assets-${{ matrix.os }}
          path: build/rv64gc_emu

  create_release:
    needs: build_and_test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-assets-${{ matrix.os }}
          path: release-assets

      - name: Create Release (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        id: create_release_ubuntu
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CREATE_RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Create Release (macOS)
        if: matrix.os == 'macOS-latest'
        id: create_release_macos
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CREATE_RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          target_commitish: ${{ github.sha }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CREATE_RELEASE_TOKEN }}
        with:
          upload_url: ${{ matrix.os == 'ubuntu-latest' && steps.create_release_ubuntu.outputs.upload_url || matrix.os == 'macOS-latest' && steps.create_release_macos.outputs.upload_url }} 
          asset_path: release-assets/rv64gc_emu
          asset_name: rv64gc_emu_${{ matrix.os }}
          asset_content_type: application/octet-stream



         
