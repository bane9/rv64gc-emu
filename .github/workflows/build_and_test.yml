name: Build and Test

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y cmake libsdl2-dev libsdl2-ttf-dev libicu-dev libvterm-dev

    - name: Install RISC-V GNU toolchain (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y gcc-riscv64-unknown-elf

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake sdl2 sdl2_ttf icu4c libvterm

    - name: Set environment variables for ICU (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "ICU_ROOT=$(brew --prefix icu4c)" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix icu4c)/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix icu4c)/include" >> $GITHUB_ENV

    - name: Install RISC-V GNU toolchain (macOS)
      if: runner.os == 'macOS'
      run: |
        brew tap riscv-software-src/riscv
        brew install riscv-tools

    - name: Add RISC-V GNU toolchain to PATH (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        echo "/usr/bin" >> $GITHUB_PATH

    - name: Configure
      run: |
        cmake . -Bbuild/ -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: |
        cmake --build build/

    # - name: Run Tests
    #   run: |
    #     cmake -P MakeTests.cmake
    #     cd build/
    #     ctest --output-on-failure 

  create_release:
    needs: build_and_test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup for Ubuntu
        if: runner.os == 'Linux'
        run: |
          echo "ASSET_NAME=rv64gc_emu_ubuntu" >> $GITHUB_ENV
          echo "ASSET_PATH=build/rv64gc_emu" >> $GITHUB_ENV

      - name: Setup for macOS
        if: runner.os == 'macOS'
        run: |
          echo "ASSET_NAME=rv64gc_emu_macos" >> $GITHUB_ENV
          echo "ASSET_PATH=build/rv64gc_emu" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream
